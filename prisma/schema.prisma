// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  cityId       Int?      @map("city_id")
  categoryId   Int       @map("category_id")
  name         String
  email        String    @unique
  password     String
  refreshToken String?   @map("refresh_token")
  birthday     DateTime?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  clubJoin     ClubJoin[] // 클럽 가입 관계 추가

  // 클럽 소유 관계 (추가)
  ownedClubs Club[] @relation("UserOwnedClubs") // 사용자가 소유한 클럽

  event     Event[]
  eventJoin EventJoin[]
  review    Review[]

  city     City?    @relation(fields: [cityId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@map("user")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  event Event[]
  user  User[]

  @@map("category")
}

model Event {
  id          Int      @id @default(autoincrement())
  clubId      Int?       @map("club_id") // 클럽 ID (nullable, 클럽 없는 이벤트도 허용)
  hostId      Int      @map("host_id")
  categoryId  Int      @map("category_id")
  title       String
  description String
  maxPeople   Int      @map("max_people")
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  club     Club?    @relation(fields: [clubId], references: [id]) // 클럽과의 관계
  host     User     @relation(fields: [hostId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  eventJoin EventJoin[]
  eventCity EventCity[]
  review    Review[]

  @@map("event")
}

model EventJoin {
  id        Int      @id @default(autoincrement())
  eventId   Int      @map("event_id")
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
  @@map("event_join")
}

model EventCity {
  id        Int      @id @default(autoincrement())
  eventId   Int      @map("event_id")
  cityId    Int      @map("city_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  event Event @relation(fields: [eventId], references: [id])
  city  City  @relation(fields: [cityId], references: [id])

  @@unique([eventId, cityId])
  @@map("event_city")
}

model Review {
  id          Int      @id @default(autoincrement())
  eventId     Int      @map("event_id")
  userId      Int      @map("user_id")
  title       String
  score       Int
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
  @@map("review")
}

model Region {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  city City[]

  @@map("region")
}

model City {
  id        Int      @id @default(autoincrement())
  regionId  Int      @map("region_id")
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  region Region @relation(fields: [regionId], references: [id])

  eventCity EventCity[]
  user      User[]

  @@map("city")
}

model Club {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  ownerId     Int         @map("owner_id") // 클럽장
  description String?     // 클럽 설명
  maxCapacity Int         @default(30)    @map("max_capacity") // 최대 정원
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  owner       User        @relation("UserOwnedClubs", fields: [ownerId], references: [id]) // 클럽장과의 관계
  clubJoin     ClubJoin[]  // 클럽 멤버
  events      Event[]     // 클럽 전용 이벤트

  @@map("club") // 데이터베이스 테이블 이름
}

model ClubJoin {
  id         Int       @id @default(autoincrement())
  clubId     Int       @map("club_id") // 소속 클럽
  userId     Int       @map("user_id") // 멤버 ID
  joinState  JoinState @default(PENDING) @map("join_state") // 가입 상태: "pending", "joined"
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  club       Club      @relation(fields: [clubId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@unique([clubId, userId]) // 클럽-유저 쌍의 고유성 보장
  @@map("club_join")
}

enum JoinState {
  PENDING @map("pending")
  JOINED @map("joined")

  @@map("join_state")
}
